<?php

namespace App\Repositories;

use App\Models\Model;
use App\Models\Quarter;

/**
 * Class QuarterRepository
 * @package App\Repositories
 * @version February 21, 2019, 9:27 pm UTC
 *
 * @method Quarter findWithoutFail($id, $columns = ['*'])
 * @method Quarter find($id, $columns = ['*'])
 * @method Quarter first($columns = ['*'])
 */
class QuarterRepository extends BaseRepository
{
    /**
     * @var array
     */
    protected $fieldSearchable = [
        'name' => 'like',
        'description' => 'like',
        'quarter_format' => 'like',
    ];

    /**
     * Configure the Model
     **/
    public function model()
    {
        return Quarter::class;
    }

    /**
     * @param array $attributes
     * @return Quarter|mixed
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function create(array $attributes)
    {
        $quarter = parent::create($attributes);

        if ($quarter) {
            $quarter = $this->saveWorkflows($quarter, $attributes);
        }

        return $quarter;
    }

    /**
     * @param Model $model
     * @param $attributes
     * @return Quarter|mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function updateExisting(Model $model, $attributes)
    {
        $quarter =  parent::updateExisting($model, $attributes); // TODO: Change the autogenerated stub

        if ($quarter) {
            $quarter = $this->saveWorkflows($quarter, $attributes);
        }

        return $quarter;
    }

    /**
     * @param Quarter $quarter
     * @param $data
     * @return Quarter
     * @throws \Exception
     */
    protected function saveWorkflows(Quarter $quarter, $data)
    {
        $workflows = $data['workflows'] ?? [];
        if ($quarter->wasRecentlyCreated) {
            $existing = collect();
        } else {
            $existing = $quarter->workflows;
        }

        $workflows = collect($workflows);
        if ($workflows->isEmpty()) {
            $this->deleteWorkflows($existing);
            return $quarter;
        }

        $needDelete = $existing->whereNotIn('id', $workflows->pluck('id'));

        $this->deleteWorkflows($needDelete);
        foreach ($workflows as $workflowData) {
            if (empty($workflowData['id'])) {
                $quarter->workflows()->create($workflowData);
            } else {
                // @TODO validate and sure exists
                $workflow = $existing->where('id', $workflowData['id'])->first();
                if ($workflow) {
                    $workflow->update($workflowData);
                } else {
                    throw new \Exception('invalid workflow id');
                }
            }

        }

        return $quarter;
    }

    /**
     * @param $workflows
     */
    protected function deleteWorkflows($workflows)
    {
        $workflows->map(function ($workflow) {
            $workflow->delete();
        });

    }
}
