<?php

namespace App\Repositories;

use App\Models\AuditableModel;
use App\Models\Model;
use App\Models\Contract;
use App\Models\Resident;
use App\Models\Unit;
use App\Traits\SaveMediaUploads;
use Illuminate\Support\Facades\App;

/**
 * Class ContractRepository
 * @package App\Repositories
 */
class ContractRepository extends BaseRepository
{
    use  SaveMediaUploads;


    /**
     * @var array
     */
    protected $fieldSearchable = [
        'contract_format' => 'like',
    ];

    /**
     * Configure the Model
     **/
    public function model()
    {
        return Contract::class;
    }

    /**
     * @param array $attributes
     * @return Contract|Model|mixed
     * @throws \OwenIt\Auditing\Exceptions\AuditingException
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function create(array $attributes)
    {
        if ( !isset($attributes['status'])) {
            $attributes['status'] = Contract::StatusActive;
        }

        $attributes = $this->fixBuildingData($attributes);
        /**
         * @var Contract $model
         */
        $model = parent::create($attributes);

        if ($model)  {
            $model = $this->saveMediaUploads($model, $attributes);
            /**
             * @var $pinboardRepository PinboardRepository
             */
            $pinboardRepository = App::make(PinboardRepository::class);
            $pinboardRepository->newResidentContractPinboard($model);
        }

       $this->setAsResidentDefaultContractIfNeed($model);

        return $model;
    }

    /**
     * @param $contract
     * @return mixed
     * @throws \OwenIt\Auditing\Exceptions\AuditingException
     */
    protected function setAsResidentDefaultContractIfNeed($contract)
    {
        if ($contract->status != Contract::StatusActive) {
            return $contract;
        }

        // save default_contract_id if need
        $contract->load('resident:id,default_contract_id');
        $resident = $contract->resident;

        if (! ($resident && is_null($resident->default_contract_id))) {
            return $contract;
        }
        
        Resident::disableAuditing();
        $resident->update(['default_contract_id' => $contract->id]);
        Resident::enableAuditing();
        (new AuditableModel())->newSystemAudit(
            'resident',
            $resident,
            AuditableModel::EventUpdated,
            true,
            [],
            true
        );

        return $contract;
    }

    /**
     * @param $unit
     * @param $residentId
     * @return Contract|Model|mixed
     * @throws \OwenIt\Auditing\Exceptions\AuditingException
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function newContractForUnit($unit, $residentId)
    {
        $attr = [
            // @TODO other attributes
            'start_date' => now(),
            'unit_id' => $unit->id,
            'resident_id' => $residentId
        ];
        return  $this->create($attr);
    }

    /**
     * @param array $attributes
     * @param $id
     * @return mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function update(array $attributes, $id)
    {
        $model = $this->model->findOrFail($id);
        return $this->updateExisting($model, $attributes);
    }

    /**
     * @param Model $model
     * @param $attributes
     * @return mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function updateExisting(Model $model, $attributes)
    {
        $attributes = $this->fixBuildingData($attributes);
        $model =  parent::updateExisting($model, $attributes); // TODO: Change the autogenerated stub
        if ($model)  {
            $model = $this->saveMediaUploads($model, $attributes);
        }
        return $model;
    }

    /**
     * @param $attributes
     * @return mixed
     */
    public function fixBuildingData($attributes)
    {
        if (isset($attributes['unit_id'])) {
            $unit = Unit::with('building')->find($attributes['unit_id']);
            if ($unit) {
                $attributes['building_id'] = $unit->building_id;
                $attributes['unit_id'] = $unit->id;
            }
        }
        return $attributes;
    }
}
